= Development Guidelines =

== SCM Tool ==

* The SCM Tool MUST be [https://github.com Github.com]. Accompanying tools or plugins that integrate well with Github (ex. Gerrit) MAY be used. 
* Github MUST be used during the <b>whole development lifecycle</b>.  
* The name of the Github Repository MAY be <i>'fiware' + '-' + "Code Name of your GE"</i>. Example: <code>fiware-orion</code>. Nonetheless,the repository's README.md file <b>MUST</b> include: 
** the following sentence: <i>'This project is part of FIWARE'</i>. 
** a hyperlink to fiware.org. 
** a hyperlink to catalogue-server.fiware.org (to the section corresponding to the particular GE). (if the GE has already an entry in the catalogue).
* When the GE code is spread over various repositories, the FIWARE hyperlinks can be included on the README.md pertaining to the main repository or at the GH user/organization level. 

* Every repository in Github SHOULD have at least one branch corresponding to the main development line,usually named 'master', and a certain number of additional branches/tags corresponding to releases.
* Every repository in Github SHOULD comply with the  Github recommended community standards checklist - e.g. https://github.com/Fiware/developmentGuidelines/community

== Development Lifecycle ==

Apart from the minimal, mandatory lifecycle described by the [[GE_Requirements.mediawiki#Development_Lifecycle|GE Requirements]] the following guidelines also apply.

The development lifecycle of a GE SHOULD be as follows: 

1. When developing a new feature / bug try to <b>divide the work</b> into smaller parts.
For instance, dividing by front-end and back-end implementation. There can be other criteria that might depend on each feature / bug.
The aim of this division is to simplify the review process. Big commits are usually hard to review, hard to change later and prone to conflicts.  

2. Once you have divided the work in parts, the implementation of each part should be done in a <b>different branch</b>
that you will use later to <i>Pull Request</i> to the GE Repository. One recommended practice is that you <i>fork</i> the original repository to your GH account
and develop the feature in your own branch (which will belong to your own repository).
Later, you will make a Pull Request from that branch to the GE repository. See [http://nvie.com/posts/a-successful-git-branching-model/].  

3. The Pull Request should include not only the feature's source code but <b>unit or integration tests</b> together with relevant documentation. 

4. At the time of landing (merging), a Pull Request should include <b>only one commit</b>.
While developing you may have more than one commit but ultimately <i>only one commit should remain</i>.
For doing so, use the [https://blog.github.com/2016-04-01-squash-your-commits/ git squash] functionality.
Nonetheless, there can be situations for which a Pull Request might be better explained with more than one commit.
In that particular case you should also try to squash your commits into functionally coherent blocks.
Nonetheless, every commit message must be descriptive of what feature or bug the code is implementing, for instance: 

<code>ISSUE 345. POST Operation /entities. Part I Parsing Requests. </code><br>
<code>ISSUE 345. POST Operation /entities. Part II DB Persistence. </code> <br>
<code>ISSUE 345. POST Operation /entities. Part III Rendering Responses. </code> 

5. Once a Pull Request is done, a <b>code review</b> will be performed. Find a competent reviewer that can perform a code review.
There can be more than one reviewer but one of them should be a main developer or technical owner/architect of the project.
Typically the reviewer will test the feature, review the code (style, robustness, structure, performance) and suggest some changes.
The code review must be made using the code review facilities provided by Github. 

6. Try to address all the comments suggested by reviewers. If a comment is not going to be addressed a rationale should be provided.

7. Wait for a final <b>positive review</b>. This may imply <i>one or more iterations</i> over steps 5 and 6.

8. Land (merge) the new code. But before landing <b>ensure that all tests are passing</b>.
Under certain conditions your Pull Request could not be directly landed (merged). In that case you would need to rebase your branch with the master branch,
resolve all conflicts, push them and finally merge the new code in the master branch.

9. If later you discover that new code is breaking something <i>do not hesitate to back out the culprit code</i>.
That's the advantage of landing only one commit. Backing out code is as easy as <code>git revert <commit_hash></code> .

== Continuous Integration ==

GE projects developed as open source SHOULD have a <b>public continuous integration system</b>. 

The continuous integration system SHOULD be running <b>every time a new Pull Request</b> (PR) is done.
As a result the PR owner can know in advance if her code is breaking something. 

Before landing new code the continuous integration system MAY be run in a temporary branch that merge the Pull Request and the destination branch.
Nonetheless, in the event of continous integration <b>errors</b> the (offending) code MUST be <b>backed out</b> or a fix should be provided urgently. Use git revert for the former. 

[https://travis-ci.org/ Travis-Ci] MAY be your <b>continuous integration system</b> as it is super-easy to integrate it with Github.
Jenkins is another popular tool which has the advantage of being able to run on different OS.

Unit tests coverage MAY be provided using open source tools like [https://coveralls.io/ coveralls]. See an example in [https://github.com/Wirecloud/wirecloud https://github.com/Wirecloud/wirecloud]

You MUST include <b>Travis badges</b> (or other badges) in your README.md file. Travis badges can be used to report the current status of your build, (it should be green!).

== Tracking ==

A Tracking system MUST be used in order to <b>manage the development work</b>. Such tracking system MUST include at least all the bugs/known issues of your component. 

The Tracking system SHOULD be <b>public</b>. You MAY use the [https://jira.fiware.org FIWARE Jira] as a <b>public tracking tool</b>.

When a commit is actually solving a bug/issue there MUST be a <b>cross-reference</b> between the commit message and the corresponding bug/issue in the Tracking System.  

When users report a new <b>bug</b>, it SHOULD be given an <b>estimation</b> of when the bug will be solved.
If the bug is consider minor or a very edge case and it will not be resolved,
it SHOULD be marked as 'WontFix' and closed. This decision MUST be <b>communicated</b> to the reporter together with a suggested workaround. 

The <b>roadmap</b> of your component SHOULD be <b>public</b>. Please check the [[GE_Requirements.mediawiki#Roadmap|General Roadmap Requirements]]

Be prepared for <b>external contributions</b>. When someone makes a Pull Request be responsive and consider carefully the proposal made.
If you want to <b>create community</b> around your component you should be open minded.
On the other hand code authored by external contributors should not break the basic design principles of your component. Be prepared for trade-offs.


== Code Quality ==

Project repositories '''SHOULD''' automate coding formatting and run code linters/style checkers
as part of the CI testing process where possible - e.g. Checkstyle, Lint4j, EsLint etc. A list of suitable tools can be found at: https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis

To attract active support community, code  '''SHOULD''' regularly be upgraded to the latest LTS libraries and versions of dependencies - e.g. Java 8,9,10 rather than Java 1.4; ECMAScript 6 rather than ECMAScript 5 etc. Ideally such changes can also be applied automatically, but '''MUST''' be tested.

Versions of dependent libraries with known vulnerabilities  '''SHOULD''' be upgraded

You SHOULD include '''Synk badges'''  (or other badges) in your README.md file. Synk can be used to report the vulnerabilities of your build, (it should be green!).


== Documentation ==

Apart from meeting the [[GE_Requirements.mediawiki#Documentation_Requirements|General Documentation Requirements]] the following guidelines apply. 

To avoid documentation inconsistencies, <b>development related</b> documents MUST be handled in the same way than Source Code, this implies:

* <b>Developers oriented</b> documentation MUST be included as part of the Github content. 
* <b>MarkDown</b> (.md) is the recommended format for document files. Restructured Text (reST) might be used as well. 
* Additional developer oriented documentation (advanced topics) MUST be present in a '/doc' folder at the root of your repository (or in an specific documentation repository associated to the GE). It is noteworthy that <i>you MUST use markdown format if you want to benefit from automatic documentation generation systems (readthedocs)</i>.
* Code and documentation MUST be synced. To this aim, every <b>Pull Request</b> with any impact in existing documentation SHOULD include any related <b>documentation changes</b>.
* <b>Inconsistencies</b> or lacks of documentation SHOULD be detected in Code Reviews and QA phases, opening <b>bugs</b> when necessary.

* A <b>README.md</b> MUST be always present in the root folder of any repository associated to the GE. The purpose of such a document associated to a GE is to document:
** GE overall description.
** How to Deploy the GE (basic/default installation procedure)
** How to run tests
** A walkthrough guide on using the main APIs
** How to get access to the advanced API and Documentation topics

More specifically, the referred README SHOULD include:

* Simple GE/Service <b>Description</b> and purpose - 
** The first paragraph should be an <b>elevator pitch</b> about the purpose of the repository (Since this is displayed on GitHub on mobile) 
** Include direct <b> Readthedocs</b> links to the <b>User Guide</b>, <b>Admin Guide</b> in a subsequent introductory paragraph (To allow users to navigate directly between code and documentation )
** Include information about testbed environments if available

* Then add a <b>Table of Contents</b> to make navigation through the rest of the document easier

* How to <b>Build & Install</b>
** Make your simplest full stack deployment as easy as possible
** Include System requirement info: SO, CPU/Storage Capacity...
** Include installation support for your dependencies
** Provide a “Hello World” example using curl (basic acceptance test)
** Include troubleshooting information for the whole process

* <b>API Overview</b> of the main data flow
** It is a tutorial, not a reference. It does not need to be exhaustive, it needs to guide the user
** Provide always curl examples for this section

* More <b>API Examples</b>
** Just the important bits of your API used in examples

* A link to the <b>API Reference Documentation</b>. [https://github.com/OAI/OpenAPI-Specification Open API] SHOULD be used.

* How to <b>run tests</b>
** End to End tests (MUST). This will be part of the sanity checks included in the "Installation & Administration Guide", thus a link will be needed. 
** Unit tests (SHOULD)
** Performance tests (MAY)

* List of links to <b>Advanced topics</b> (/doc folder)
** User & Programmers Manual            (MUST)
** Installation & Administration Guide (MUST)
** Other documents, for instance: HA deployment, detailed architecture, Advanced configuration topics, advanced functionalities, ...

== Configuration ==

GEs SHOULD be configurable through a <b>config file</b>. 

If the GE can be configured through a config file a <b>template/example</b> configuration file MUST be present and fully aligned with every branch. 

The config file must be seen as part of the documentation (for integrators and deployers).
So it is mandatory to <b>document every config param</b>, its available options and operation advices.
[https://github.com/antirez/redis/blob/unstable/redis.conf Redis configuration] is an illustrative example.

== Software Releases (source code) ==

Apart from meeting the general [[GE_Requirements.mediawiki#Releases|Release Requirements]] the following guidelines apply.  

Each code release SHOULD be properly <b>tagged</b> in your Github repository. 

Each component should always show a consistent view in the “Releases” and “Tags” tabs at GitHub.com. Examples:

* https://github.com/fiware/context.Orion/releases

* https://github.com/fiware/context.Orion/tags

The release notes SHOULD include links for downloading the source code. 

The <b>release notes</b> associated to each Release SHOULD include the <b>changelog</b> for that release,
i.e. the list of changes regarding the previous version, including (if possible) links to the <b>GitHub issues</b> related to each change.

== Binary Releases ==

GEs <b>MUST</b> provide Docker containers according to [[Docker|Docker Guidelines]]. 

== Additional Repository Content ==

Files describing the <b>Licensing and Contribution Policy</b> MUST be included in the repository.
Please check the [[GE_Requirements.mediawiki#Licensing_Requirements|General GE Licensing Requirements]]. 
They MUST be consistent with those reflected in the [http://catalogue-server.fiware.org FIWARE Catalogue].

== Developer Support ==

Apart from meeting the general [[GE_Requirements.mediawiki#Ecosystem_Support_and_Quality_Requirements|Ecosystem Support and Quality Requirements]] the following guidelines
apply.  

[http://stackoverflow.com Stackoverflow] SHOULD be used for thorough technical questions. Educate your users to <b>tag</b> their questions properly in Stackoverflow. 

Each FIWARE GE <b>MUST</b> be associated to an Stackoverflow tag. Such tag could be specific for a GE or default to a chapter generic tag, for instance <fiware-iot>. 

Stackoverflow tags SHOULD be of the form ''fiware-<GE codename>''. Example fiware-orion.
Creating new tags requires Stackoverflow Karma. You MAY ask someone from the FIWARE community with enough Karma to create tags for your GE.
Otherwise you can use the [https://ask.fiware.org FIWARE Q&A] platform. 

* ''Exception to the rule:'' In the case the GE is associated to an existing tag (e.g. the tag was created before that GE joined FIWARE),
it could be used instead of the usual fiware-XXXX as an exception, as long as the two following conditions occur:

1) the tag clearly reflect the name of the GE,
2) the tag is already widely used in StackOverflow (i.e. more than 30 questions using it).
Anyway, this is a workaround valid only in the case a tag synonym cannot be created due to reputational constraints.

<b>New releases</b> of your components SHOULD be announced through different channels: FIWARE Blog, dedicated Twitter or similar channels, your own Blog ... 

Support <b>responsiveness</b> is a MUST. If a feature is not implemented / not available, an alternative <b>workaround</b> MUST be provided.
Afterwards it can be decided whether it is necessary / worth adding such a new feature to your backlog.
